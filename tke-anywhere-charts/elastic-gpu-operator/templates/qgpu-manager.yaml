---
{{- if .Values.qgpu.enabled }}
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: qgpu-manager
rules:
  - apiGroups:
      - ""
    resources:
      - "*"
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - events
    verbs:
      - create
      - patch
  - apiGroups:
      - ""
    resources:
      - pods
      - nodes
    verbs:
      - update
      - patch
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes/status
    verbs:
      - patch
      - update
{{- if .Values.psp.enabled }}
  - apiGroups:
      - policy
    resources:
      - podsecuritypolicies
    verbs:
      - use
    resourceNames:
     - gpu-operator-privileged
{{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: qgpu-manager
  namespace: {{ .Release.Namespace }}
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: qgpu-manager
  namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: qgpu-manager
subjects:
  - kind: ServiceAccount
    name: qgpu-manager
    namespace: {{ .Release.Namespace }}
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: qgpu-manager
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: qgpu-manager
  template:
    metadata:
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        app: qgpu-manager
    spec:
      runtimeClassName: nvidia
      hostPID: true
      serviceAccount: qgpu-manager
      {{- if .Values.global.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.global.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
      {{- end }}
      tolerations:
      - operator: Exists
      nodeSelector:        
        nvidia.com/gpu.present: "true"
        {{- if and .Values.devicePlugin.enabled .Values.qgpu.enabled }}
        tke.cloud.tencent.com/qgpu-device-enabled: "true"
        {{- end }}
      initContainers:
        - name: driver-validation
          image: {{ .Values.global.repository }}/{{ .Values.validator.image }}:{{ .Values.validator.version | default .Chart.AppVersion }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          command: ['sh', '-c']
          args: ["nvidia-validator"]
          env:
          - name: WITH_WAIT
            value: "true"
          - name: COMPONENT
            value: driver
          securityContext:
            privileged: true
            seLinuxOptions:
              level: "s0"
          volumeMounts:
          - name: host-root
            mountPath: /run/nvidia/driver
            mountPropagation: HostToContainer
          - name: run-nvidia-validations
            mountPath: /run/nvidia/validations
            mountPropagation: Bidirectional
        - name: qgpu-installer
          image: {{ .Values.global.repository }}/{{ .Values.qgpu.manager.image }}:{{ .Values.qgpu.manager.version }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          command: ["/usr/bin/install.sh", "http://qgpu-license-server:10080"]
          securityContext:
            privileged: true
          env:
            - name: PRIVATE_MODE
              value: "true"
          {{- if .Values.toolkit.enabled }}
            - name: TOOLKIT_INSTALLED_BY_OPERATOR
              value: "true"
          {{- end}}
            - name: HOST_PREFIX
              value: /host
            - name: ENV_MODIFY_KERNEL_REBOOT
              value: "{{ .Values.qgpu.manager.modifyKernelReboot }}"
          volumeMounts:
            - name: host-root
              mountPath: /host
      containers:
        - image: {{ .Values.global.repository }}/{{ .Values.qgpu.manager.image }}:{{ .Values.qgpu.manager.version }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          command: 
          - "/usr/bin/qgpu-manager"
          - "--nodename=$(NODE_NAME)"
          - "--dbfile=/host/var/lib/qgpu/meta.db"
          - "--ls-endpoint=http://qgpu-license-server:10080"
          {{- if eq .Values.qgpu.manager.labelEnabled false }}
          - "--enable-label=false"
          {{- end }}
          name: qgpu-manager
          resources:
            limits:
              memory: "300Mi"
              cpu: "0.2"
            requests:
              memory: "300Mi"
              cpu: "0.2"
          env:
            - name: PRIVATE_MODE
              value: "true"
          {{- if .Values.toolkit.enabled }}
            - name: TOOLKIT_INSTALLED_BY_OPERATOR
              value: "true"
          {{- end}}
            - name: HOST_PREFIX
              value: /host
            - name: KUBECONFIG
              value: /etc/kubernetes/kubelet.conf
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          securityContext:
            privileged: true
          volumeMounts:
            - name: device-plugin
              mountPath: /var/lib/kubelet/device-plugins
            - name: pod-resources
              mountPath: /var/lib/kubelet/pod-resources
            - name: host-var
              mountPath: /host/var
            - name: host-dev
              mountPath: /host/dev
            - name: host-root
              mountPath: /host
        - image: {{ .Values.global.repository }}/{{ .Values.qgpu.manager.image }}:{{ .Values.qgpu.manager.version }}
          imagePullPolicy: {{ .Values.global.imagePullPolicy }}
          command: ["/usr/bin/qgpu-controller"]
          name: qgpu-controller
          resources:
            limits:
              memory: "100Mi"
              cpu: "0.1"
            requests:
              memory: "100Mi"
              cpu: "0.1"
          env:
            - name: PRIVATE_MODE
              value: "true"
            - name: HOST_PREFIX
              value: /host
          volumeMounts:
            - name: host-root
              mountPath: /host
          securityContext:
            privileged: true
      volumes:
        - name: device-plugin
          hostPath:
            path: /var/lib/kubelet/device-plugins
        - name: pod-resources
          hostPath:
            path: {{ .Values.qgpu.manager.kubeletRootDir }}/pod-resources
        - name: host-var
          hostPath:
            type: Directory
            path: /var
        - name: host-dev
          hostPath:
            type: Directory
            path: /dev
        - name: host-root
          hostPath:
            type: Directory
            path: /
        - hostPath:
            path: /run/nvidia/validations
            type: DirectoryOrCreate
          name: run-nvidia-validations
{{- end }}
