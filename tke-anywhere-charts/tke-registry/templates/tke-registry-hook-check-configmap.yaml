kind: ConfigMap
apiVersion: v1
metadata:
  name: tke-registry-chart-hook-check
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation
data:
  chart-hook-check.sh: |
    #!/bin/bash

    function check_deployment {
        check=true
        while [ $check = true ]
        do
        check=false
        result=$(kubectl get deployment $1 -n $2 --ignore-not-found -o go-template --template='{{ "{{if or (ne (.status.replicas) (.status.readyReplicas)) (ne (.status.replicas) (.status.updatedReplicas))}}false{{else}}true{{end}}" }}')
        if [ $check = false ] && ([ -z $result ] || [ $result != true ]); then
            check=true
            echo "waiting $1"
            sleep 1
        fi
        done

    }

    function check_daemonset {
        check=true
        while [ $check = true ]
        do
        check=false
        result=$(kubectl get daemonset $1 -n $2 --ignore-not-found -o go-template --template='{{ "{{if or (ne (.status.desiredNumberScheduled) (.status.numberReady)) (ne (.status.desiredNumberScheduled) (.status.updatedNumberScheduled))}}false{{else}}true{{end}}" }}')
        if [ $check = false ] && ([ -z $result ] || [ $result != true ]); then
            check=true
            echo "waiting $1"
            sleep 1
        fi
        done
    }

    function check_components_cr {
        check=true
        while [ $check = true ]
        do
        check=false
        if [ $check = false ] && [ $(kubectl get $1 -A 2>&1 | grep -i error | wc -l) -gt 0 ]; then
            check=true
            echo "waiting $1"
            sleep 1
        fi
        done
    }

    function check_storage_class {
        check=true
        while [ $check = true ]
        do
        check=false
        if [ $check = false ] && [ $(kubectl get storageclass $1 2>&1 | grep -i error | wc -l) -gt 0 ]; then
            check=true
            echo "waiting persistence storage class"
            sleep 1
        fi
        done
    }

    CHECK_TYPE=$1
    echo $CHECK_TYPE
    case $CHECK_TYPE in
        registry-pre-install-check)
            check_components_cr client
            check_daemonset tke-auth-api tke
            check_deployment tke-auth-controller tke
            ;;
        registry-post-install-check)
            check_components_cr chartgroups
            check_deployment tke-registry-api tke
            check_deployment tke-registry-controller tke
            ;;
        registry-post-upgrade-check)
            check_components_cr chartgroups
            check_deployment tke-registry-api tke
            check_deployment tke-registry-controller tke
            ;;
        registry-pre-install-check-persistence-storage)
            check_storage_class {{ .Values.persistence.storageClassName }}
            ;;
    esac
